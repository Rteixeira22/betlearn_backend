-- PostgreSQL Script generated from MySQL conversion
-- Wed Mar 19 12:02:49 2025
-- Model: New Model Version: 1.0
 
BEGIN;
 
-- Schema betlearn
CREATE SCHEMA IF NOT EXISTS betlearn;
 
SET search_path TO betlearn;
 
-- Table betlearn.Users
CREATE TABLE IF NOT EXISTS betlearn.Users (
 id_user SERIAL PRIMARY KEY,
 name VARCHAR(100) NOT NULL,
 email VARCHAR(100) NOT NULL UNIQUE,
 username VARCHAR(50) NOT NULL UNIQUE,
 birthdate DATE NOT NULL,
 money DECIMAL(10,2) NOT NULL CHECK (money >= 0),
 points INTEGER NOT NULL CHECK (points >= 0),
 image VARCHAR(200),
 bets_visibility BOOLEAN NOT NULL DEFAULT TRUE,
 tutorial_verification BOOLEAN NOT NULL,
 password TEXT(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS betlearn.Admins (
 id_user SERIAL PRIMARY KEY,
 name VARCHAR(100) NOT NULL,
 email VARCHAR(100) NOT NULL UNIQUE,
 username VARCHAR(50) NOT NULL UNIQUE,
 password TEXT(100) NOT NULL
);
 
-- Table betlearn.Challenges
CREATE TABLE IF NOT EXISTS betlearn.Challenges (
 id_challenge SERIAL PRIMARY KEY,
 number INTEGER NOT NULL CHECK (number >= 0),
 name VARCHAR(50) NOT NULL,
 short_description VARCHAR(100) NOT NULL,
 long_description VARCHAR(150) NOT NULL,
 image VARCHAR(200) NOT NULL
);
 
-- Table betlearn.User_has_Challenges
CREATE TABLE IF NOT EXISTS betlearn.User_has_Challenges (
 ref_id_user INTEGER NOT NULL,
 ref_id_challenge INTEGER NOT NULL,
 completed BOOLEAN NOT NULL,
 blocked BOOLEAN NOT NULL,
 detail_seen BOOLEAN NOT NULL,
 progress_percentage INTEGER NOT NULL DEFAULT 0 CHECK (progress_percentage >= 0),
 PRIMARY KEY (ref_id_user, ref_id_challenge),
 CONSTRAINT fk_user_challenges_user
   FOREIGN KEY (ref_id_user)
   REFERENCES betlearn.Users (id_user)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_user_challenges_challenges
   FOREIGN KEY (ref_id_challenge)
   REFERENCES betlearn.Challenges (id_challenge)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION
);
 
CREATE INDEX idx_user_challenges_challenge ON betlearn.User_has_Challenges(ref_id_challenge);
CREATE INDEX idx_user_challenges_user ON betlearn.User_has_Challenges(ref_id_user);
 
-- Table betlearn.Questionnaire_Response
CREATE TABLE IF NOT EXISTS betlearn.Questionnaire_Response (
 id_questionnaire_response SERIAL PRIMARY KEY,
 budget DECIMAL(10,2) NOT NULL CHECK (budget >= 0),
 verification BOOLEAN NOT NULL DEFAULT FALSE,
 salary INTEGER NOT NULL CHECK (salary >= 0),
 expenses INTEGER NOT NULL CHECK (expenses >= 0),
 available_amount INTEGER NOT NULL CHECK (available_amount >= 0),
 debt SMALLINT NOT NULL CHECK (debt >= 0),
 debt_monthly DECIMAL(10,2) NOT NULL CHECK (debt_monthly >= 0),
 income_source INTEGER NOT NULL CHECK (income_source >= 0),
 ref_id_user INTEGER NOT NULL,
 CONSTRAINT fk_questionnaire_user
   FOREIGN KEY (ref_id_user)
   REFERENCES betlearn.Users (id_user)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION
);
 
CREATE INDEX idx_questionnaire_user ON betlearn.Questionnaire_Response(ref_id_user);
 
-- Table betlearn.Games
CREATE TABLE IF NOT EXISTS betlearn.Games (
 id_game SERIAL PRIMARY KEY,
 local_team VARCHAR(50) NOT NULL,
 visitor_team VARCHAR(50) NOT NULL,
 schedule TIMESTAMP NOT NULL,
 betted_team VARCHAR(50) NOT NULL,
 odd DECIMAL(10,2) NOT NULL CHECK (odd >= 0),
 goals_local_team INTEGER NOT NULL CHECK (goals_local_team >= 0),
 goals_visitor_team INTEGER NOT NULL CHECK (goals_visitor_team >= 0),
 image VARCHAR(200) NOT NULL,
 game_state SMALLINT NOT NULL
);
 
-- Table betlearn.Tips
CREATE TABLE IF NOT EXISTS betlearn.Tips (
 id_tip SERIAL PRIMARY KEY,
 tip VARCHAR(50) NOT NULL,
 active INT NOT NULL
);
 
-- Table betlearn.Bets
CREATE TABLE IF NOT EXISTS betlearn.Bets (
 id_bets SERIAL PRIMARY KEY,
 date TIMESTAMP NOT NULL,
 type SMALLINT NOT NULL,
 amount DECIMAL(10,2) NOT NULL CHECK (amount >= 0),
 potential_earning DECIMAL(10,2) NOT NULL CHECK (potential_earning >= 0),
 odd DECIMAL(10,2) NOT NULL CHECK (odd >= 0),
 ref INTEGER NOT NULL,
 state SMALLINT NOT NULL, -- Active/Closed
 result SMALLINT NOT NULL,
 ref_id_user INTEGER NOT NULL,
 CONSTRAINT fk_bets_user
   FOREIGN KEY (ref_id_user)
   REFERENCES betlearn.Users (id_user)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION
);
 
CREATE INDEX idx_bets_user ON betlearn.Bets(ref_id_user);
 
-- Table betlearn.Championship
CREATE TABLE IF NOT EXISTS betlearn.Championship (
 id_championship SERIAL PRIMARY KEY,
 json VARCHAR(200) NOT NULL UNIQUE
);
 
-- Table betlearn.Bets_has_Games
CREATE TABLE IF NOT EXISTS betlearn.Bets_has_Games (
 ref_id_bet INTEGER NOT NULL,
 ref_id_game INTEGER NOT NULL,
 ref_id_championship INTEGER NOT NULL,
 PRIMARY KEY (ref_id_bet, ref_id_game, ref_id_championship),
 CONSTRAINT fk_betsgames_bet
   FOREIGN KEY (ref_id_bet)
   REFERENCES betlearn.Bets (id_bets)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_betsgames_game
   FOREIGN KEY (ref_id_game)
   REFERENCES betlearn.Games (id_game)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_betsgames_championship
   FOREIGN KEY (ref_id_championship)
   REFERENCES betlearn.Championship (id_championship)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION
);
 
CREATE INDEX idx_betsgames_game ON betlearn.Bets_has_Games(ref_id_game);
CREATE INDEX idx_betsgames_bet ON betlearn.Bets_has_Games(ref_id_bet);
CREATE INDEX idx_betsgames_championship ON betlearn.Bets_has_Games(ref_id_championship);
 
-- Table betlearn.Step_Video
CREATE TABLE IF NOT EXISTS betlearn.Step_Video (
 id_step_video SERIAL PRIMARY KEY,
 video_url VARCHAR(200) NOT NULL,
 video_description VARCHAR(200) NOT NULL
);
 
-- Table betlearn.Step_Bet
CREATE TABLE IF NOT EXISTS betlearn.Step_Bet (
 id_step_bet SERIAL PRIMARY KEY,
 bet_description VARCHAR(200) NOT NULL,
 bet_json VARCHAR(200) NOT NULL
);
 
-- Table betlearn.Step_Questionnaire
CREATE TABLE IF NOT EXISTS betlearn.Step_Questionnaire (
 id_step_questionnaire SERIAL PRIMARY KEY,
 questionnaire_description VARCHAR(200) NOT NULL,
 questionnaire_json VARCHAR(45) NOT NULL
);
 
-- Table betlearn.Step_View
CREATE TABLE IF NOT EXISTS betlearn.Step_View (
 id_step_view SERIAL PRIMARY KEY,
 view_description VARCHAR(200) NOT NULL,
 view_page VARCHAR(200) NOT NULL
);
 
-- Table betlearn.Steps
CREATE TABLE IF NOT EXISTS betlearn.Steps (
 id_step SERIAL PRIMARY KEY,
 ref_id_step_video INTEGER,
 ref_id_step_bet INTEGER,
 ref_id_step_view INTEGER,
 ref_id_step_questionnaire INTEGER,
 ref_id_challenges INTEGER NOT NULL,
 CONSTRAINT fk_steps_video
   FOREIGN KEY (ref_id_step_video)
   REFERENCES betlearn.Step_Video (id_step_video)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_steps_bet
   FOREIGN KEY (ref_id_step_bet)
   REFERENCES betlearn.Step_Bet (id_step_bet)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_steps_view
   FOREIGN KEY (ref_id_step_view)
   REFERENCES betlearn.Step_View (id_step_view)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_steps_questionnaire
   FOREIGN KEY (ref_id_step_questionnaire)
   REFERENCES betlearn.Step_Questionnaire (id_step_questionnaire)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_steps_challenges
   FOREIGN KEY (ref_id_challenges)
   REFERENCES betlearn.Challenges (id_challenge)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION
);
 
CREATE INDEX idx_steps_video ON betlearn.Steps(ref_id_step_video);
CREATE INDEX idx_steps_bet ON betlearn.Steps(ref_id_step_bet);
CREATE INDEX idx_steps_view ON betlearn.Steps(ref_id_step_view);
CREATE INDEX idx_steps_questionnaire ON betlearn.Steps(ref_id_step_questionnaire);
CREATE INDEX idx_steps_challenges ON betlearn.Steps(ref_id_challenges);
 
-- Table betlearn.User_has_Challenges_has_Steps
CREATE TABLE IF NOT EXISTS betlearn.User_has_Challenges_has_Steps (
 ref_user_has_Challenges_id_user INTEGER NOT NULL,
 ref_user_has_Challenges_id_challenge INTEGER NOT NULL,
 ref_id_steps INTEGER NOT NULL,
 state SMALLINT NOT NULL CHECK (state >= 0),
 PRIMARY KEY (ref_user_has_Challenges_id_user, ref_user_has_Challenges_id_challenge, ref_id_steps),
 CONSTRAINT fk_user_challenges_steps_user_challenges
   FOREIGN KEY (ref_user_has_Challenges_id_user, ref_user_has_Challenges_id_challenge)
   REFERENCES betlearn.User_has_Challenges (ref_id_user, ref_id_challenge)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION,
 CONSTRAINT fk_user_challenges_steps_steps
   FOREIGN KEY (ref_id_steps)
   REFERENCES betlearn.Steps (id_step)
   ON DELETE NO ACTION
   ON UPDATE NO ACTION
);
 
CREATE INDEX idx_user_challenges_steps_steps ON betlearn.User_has_Challenges_has_Steps(ref_id_steps);
CREATE INDEX idx_user_challenges_steps_user_challenges ON betlearn.User_has_Challenges_has_Steps(ref_user_has_Challenges_id_user, ref_user_has_Challenges_id_challenge);
 
COMMIT;
 
 
